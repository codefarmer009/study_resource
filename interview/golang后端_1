一，Go语言相关

1，Go里有哪些数据结构是并发安全的？int类型是并发安全的吗？

  int类型非并发安全：
    CPU指令的非原子性：对于普通的int操作（如 i++），在汇编层面可能对应多条指令：
    1: 从内存加载值到寄存器
    2: 修改寄存器中的值
    3: 将寄存器中的值写回内存
    若多个 goroutine 同时执行此操作，中间状态可能被覆盖，导致结果不符合预期。
  
  int类型为什么不设计成安全的：
    Go的设计哲学是“通过通信来共享内存，而不是通过共享内存来通信”，鼓励使用channel来传递数据，减少显式的锁的使用。
    因此，基础类型默认不提供并发安全，而是让开发者根据需要选择适当的同步机制，这样既灵活又高效。
    另外，性能是一个重要因素。如果每个int操作都加锁，那么即使是在单线程环境下，也会有无谓的性能损耗。
    而Go的目标是系统编程和高性能应用，所以必须保持基础操作的高效。通过让开发者显式地处理同步，可以在需要的时候才付出性能代价，而不是默认情况下就带来开销。
  
    还有，Go的类型系统设计也是原因之一。int类型在不同的平台上可能有不同的大小，比如32位或64位，而原子操作通常需要明确的内存对齐和大小。
    sync/atomic包提供了针对int32和int64的原子操作，但普通的int类型并没有对应的原子操作，这也是为什么推荐使用明确的类型来处理原子操作。

2，Go如何实现一个单例模式？

  https://www.upyun.com/tech/article/717/Golang%20%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html
  https://juejin.cn/post/7124720007447052302

3，sync.Once是如何实现的，如何不使用sync.Once实现单例模式？

4，Go语言里的map是并发安全的吗？

5，如果要实现一个并发安全的map，该怎么做？（分桶加锁）

6，Slice与数组的区别

7，Slice的底层实现

8，不同的Slice在复制和传值时，是深拷贝还是浅拷贝？

9，sync.map的底层实现

10，sync.mutex的底层实现

11，如何判断一个结构体是否实现了某接口？

12，channel为什么不常用？

13，channel在什么情况下会panic？

14，介绍一下GMP模型

15，如果有100个IO密集型协程，10个计算密集型协程，那么这100个IO密集型协程会对这10个计算密集型协程产生影响吗？根据自己对GMP模型的理解进行分析并得出结论

16，GMP模型相比于正常的协程-线程-进程调度，有哪些优点和缺点？

17，Grpc的实现原理

18，介绍一下Grpc实现过程中，经历了哪些层次？

19，相比于C语言，Go语言开发有哪些改进？

20，介绍一下Go语言的内存分配和垃圾回收机制？

21，Go语言在使用过程中，哪些情况可能会导致panic？

22，Go语言内存泄漏的排查思路

23，Go语言中context常用场景，及实现细节

24，Gin框架相比标准包，解决了哪些问题？

二，Redis相关

1，介绍一下redis在工作中的用途

2，redis在工作中一般可以承受多少的qps?

3，redis有哪些数据结构，分别常用与哪些场合？

4，redis跳表实现细节，为什么选用跳表，而不选择红黑树和B+树？
https://zhuanlan.zhihu.com/p/349271158

5，redis中使用Lua脚本为什么能保证事务性？

6，在分布式锁实现时，Setnx一定是可靠的吗，为什么（主从不一致）？

7，如果需要保证可靠，需要怎样的机制保证（Raft算法）？

8，redis为什么要防止bigkey？

9，redis是内存相关的数据库，那么有1G的数据，想要以key-value的方式存储，那么是每个key的数据多一些更占内存，还是少一些更占内存，根据所学的redis底层数据结构实现进行分析和回答

10，redis的网络IO模型介绍

11，epoll和select模型的区别

12，redis中TTL到期后是如何回收的？

13，在使用分布式锁时，如何保证解锁时是之前上过的锁？

14，使用redis实现分布式缓存时，需要注意哪些问题？

15，说下缓存击穿，缓存穿透，缓存雪崩有什么区别？

三，MySQL相关

1，索引的底层实现

2，为什么使用B+树，而不使用跳表？
https://blog.csdn.net/crazymakercircle/article/details/136760409

3，MySQL分表怎么做？

4，如果要添加分表或删除分表，如何操作（一致性哈希算法）？

5，主键索引和唯一索引的区别

6，有遇到深翻页问题吗，如何解决？

7，在使用分布式缓存时，数据库和缓存的数据一致性如何解决？

8，MySQL自增主键，一定是自增的吗？有哪些方式会破坏这个性质

四，计算机基础

1，计算机网络的多层模型简要介绍

2，如果要做负载均衡，那么应该在哪一层上做文章？

3，TCP

4，http状态码

5，http2.0相比与http1.1的优化

6，DNS的实现细节

7，http协议中，如何判断该报文已经传送完所有的数据并结束？

8，https

五，算法相关

1，介绍Raft算法

2，主动轮询型和监听回调型有什么区别？分别应用在哪些场合？

3，介绍一下微服务架构，有哪些优点和缺点，为什么要使用微服务架构？

4，介绍一下CAP模型

5，介绍一下令牌桶限流算法

6，还有其他的限流算法吗，分别有什么优劣，适用于什么场景？

7，如何实现LRU缓存？

8，如何解决LRU缓存中刷盘的问题，即，业务中扫描了大量的数据，这些数据把LRU缓存占满，但是在之后不会再访问，导致缓存中存在大量非热点数据，如何解决？（LFU）

9，布隆过滤器，及其常用的业务场景

10，前缀树实现

六，K8S，docker相关

1，什么是声明式API？

2，Etcd数据库有什么特性，为什么K8S选用了Etcd数据库？

3，K8S中一个node的生命周期是怎样的？

4，服务发现机制介绍

5，docker的实现原理介绍

6，如果只是使用Linux命名空间进行分离，那么容器将很容易实现，docker相比于容器的核心竞争力在哪里？

7，Nginx介绍

8，Nginx在K8S中负责什么模块？

9，如何排查K8S中OOM的问题？

10，容器开发相比与虚拟机开发，有哪些优劣势？

11，容器隔离的不安全，有哪些根源上的原因？

  https://zhuanlan.zhihu.com/p/85528062
  容器隔离的不安全性源于多个层面的设计和实现缺陷，以下是根源性原因的详细分析：
  1. 共享内核架构
    内核漏洞风险：容器与宿主机共享同一内核，一旦内核存在漏洞（如CVE-2016-5195脏牛漏洞），攻击者可利用容器逃逸控制宿主机。
    内核接口暴露：容器内进程可通过/proc或/sys等接口直接访问内核参数，若未严格隔离，可能引发信息泄露或攻击。
  2. 隔离机制局限性
    命名空间覆盖不全：虽然Linux命名空间（如PID、Network、Mount）隔离了部分资源，但某些子系统（如用户命名空间、设备树）默认未完全隔离。例如，未启用用户命名空间时，容器内root可能映射为宿主机root，导致权限提升。
    cgroups资源限制缺陷：若未合理配置cgroups资源配额（CPU、内存），容器可能耗尽宿主机资源，引发DoS攻击。
  3. 不安全的镜像与构建
    不可信镜像来源：使用包含漏洞或恶意代码的镜像（如过时的基础镜像）直接引入风险。
    过度权限构建：镜像构建时默认以root权限运行服务，或包含敏感信息（如硬编码凭证），扩大攻击面。
  4. 运行时配置不当
    特权模式滥用：启用--privileged或赋予过多Linux Capabilities（如CAP_SYS_ADMIN），允许容器执行加载内核模块等危险操作。
    敏感目录挂载：挂载宿主机根目录（/）或Docker Socket（/var/run/docker.sock），使容器可直接操控宿主机。
  5. 网络隔离不足
    默认网络策略宽松：容器间默认共享网络命名空间，可能通过ARP欺骗或端口扫描实施横向攻击。
    服务暴露过度：未配置防火墙或服务暴露在公共网络，增加被入侵风险。
  6. 安全工具未适配
    Seccomp/AppArmor配置缺失：未启用或错误配置安全策略，导致容器进程可调用危险系统调用（如mount()或ptrace()）。
    用户命名空间未启用：默认未启用用户命名空间，容器内UID与宿主机直接映射，加剧权限逃逸风险。
  7. 持久化存储风险
    卷挂载权限过高：挂载宿主机目录时未限制读写权限，容器内恶意进程可能篡改关键文件（如SSH密钥或定时任务）。
  8. 管理组件漏洞
    容器运行时漏洞：如runC漏洞（CVE-2019-5736）可导致容器逃逸，直接破坏隔离性。
    编排平台配置错误：Kubernetes等平台若未配置RBAC或网络策略，攻击者可横向移动或提权。
  9. 监控与响应缺失
    日志审计不足：缺乏对容器异常行为（如可疑进程或网络连接）的监控，难以快速发现攻击行为。
  缓解建议
    最小化权限：禁用特权模式、按需分配Capabilities、启用用户命名空间。
    强化镜像安全：使用可信基础镜像、扫描漏洞、遵循最小化构建原则。
    严格隔离配置：启用Seccomp/AppArmor、限制网络访问、隔离敏感目录。
    内核级加固：定期更新内核、使用容器专属内核（如gVisor/Kata Containers）。
    持续监控：部署审计工具（如Falco）、监控容器行为与资源使用。
    容器安全需结合技术加固与流程管控（如DevSecOps），通过纵深防御降低隔离失效风险。

    容器逃逸：https://chat.deepseek.com/a/chat/s/a9aec4f2-ee1e-47da-bbb2-545caf8f95d8


七，项目相关

1，分布式存储，如何解决分块上传问题（保证数据一致性）？（数据偏移+校验和）

2，节点不可达如何处理？（主从，raft算法保证一致性）


八，场景题

1，库存超卖问题

2，使用爬虫爬取URL时，能使用的内存空间只有1MB，如何过滤已经爬取过的URL？

3，在K8S架构中，如何处理单机或单容器限流问题，以免该容器负载过高导致整个node不可用？

4，如何处理长连接的负载均衡问题？

5，如果业务需要添加新的接口，但是在旧MySQL表中没有对应索引，如何解决？

6，如何处理单用户重复调用问题（翻译：如何保证多次操作的幂等性）？

7，技术选型时，
